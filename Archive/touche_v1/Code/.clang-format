#  The extra indent or outdent of access modifiers, e.g. public:
AccessModifierOffset: -2

# If true, horizontally aligns arguments after an open bracket
AlignAfterOpenBracket: false

# Style of aligning consecutive Assignements/declarations
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false

# Options for aligning backslashes in escaped newlines
AlignEscapedNewlines: Left

# If true, horizontally align operands of binary and ternary expressions
AlignOperands: true

# align comments in end of lines
AlignTrailingComments: true

# if the function declaration doesn’t fit on a line, allow putting all parameters onto the next line
AllowAllParametersOfDeclarationOnNextLine: true

# Dependent on the value, while (true) { continue; } can be put on a single line
AllowShortBlocksOnASingleLine: Never

# If true, short case labels will be contracted to a single line
AllowShortCaseLabelsOnASingleLine: false

# Dependent on the value, int f() { return 0; } can be put on a single line
AllowShortFunctionsOnASingleLine: false

# If true, if (a) return; can be put on a single line
AllowShortIfStatementsOnASingleLine: false

# If true, while (true) continue; can be put on a single line
AllowShortLoopsOnASingleLine: false

# The function return type breaking style to use :
AlwaysBreakAfterReturnType: None

# If true, always break before multiline string literals
AlwaysBreakBeforeMultilineStrings: false

# The template declaration breaking style to use
AlwaysBreakTemplateDeclarations: No

# Functions arguments on the same line or all differents lines
BinPackArguments: true

# same for parameters
BinPackParameters: true

# The way to wrap binary operators
BreakBeforeBinaryOperators: None

BreakBeforeBraces: Custom
BraceWrapping:
  AfterClass: false
  AfterControlStatement: false
  AfterEnum: false
  AfterFunction: true
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  IndentBraces: false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# If true, ternary operators will be placed after line breaks
BreakBeforeTernaryOperators: false

# Break constructor initializers after the colon and commas
BreakConstructorInitializers: AfterColon

# Allow breaking string literals when formatting
BreakStringLiterals: true

# The column limit
ColumnLimit: 120

# IDK
# CommentPragmas: '^ IWYU pragma:'
CompactNamespaces: false

# If the constructor initializers don’t fit on a line, put each initializer on its own line
ConstructorInitializerAllOnOneLineOrOnePerLine: false

# The number of characters to use for indentation of constructor initializer lists as well as inheritance lists
ConstructorInitializerIndentWidth: 4

# Indent width for line continuations
ContinuationIndentWidth: 4

# space inside braces : vector<int> x{1, 2, 3, 4};     vs.     vector<int> x{ 1, 2, 3, 4 };
Cpp11BracedListStyle: true

# auto guess pointer alignement
DerivePointerAlignment: false

# Disables formatting completely
DisableFormat: false

# If true, clang-format detects whether function calls and definitions are formatted with one parameter per line
ExperimentalAutoDetectBinPacking: false

# add namespace name comment on namespace closing brace
FixNamespaceComments: true

# sort include blocks
IncludeBlocks: Regroup

# include categories priorities
IncludeCategories:
  - Regex: '^"(llvm|llvm-c|clang|clang-c)/'
    Priority: 2
  - Regex: '^(<|"(gtest|gmock|isl|json)/)'
    Priority: 3
  - Regex: '.*'
    Priority: 1

# complicated but don't touch
IncludeIsMainRegex: '(Test)?$'

# indent case labels
IndentCaseLabels: true

# The preprocessor directive indenting style to use
IndentPPDirectives: BeforeHash

# The number of columns to use for indentation
IndentWidth: 4

# Indent if a function definition or declaration is wrapped after the type
IndentWrappedFunctionNames: true

# If true, the empty line at the start of blocks is kept
KeepEmptyLinesAtTheStartOfBlocks: false

# complicated but don't touch
MacroBlockBegin: ''
MacroBlockEnd: ''

# max consecutive empty lines
MaxEmptyLinesToKeep: 1

# The indentation used for namespaces
NamespaceIndentation: All

# penalyties tldr -> keep it to avoid weird formats sometimes
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 100
PenaltyBreakString: 1000
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 60

# where to align the *
PointerAlignment: Right

# break lines in long comments
ReflowComments: false

# how clang-format will sort #includes
SortIncludes: true

# If true, clang-format will sort using declarations
SortUsingDeclarations: true

# If true, a space is inserted after C style casts
SpaceAfterCStyleCast: false

# If true, a space will be inserted after the ‘template’ keyword
SpaceAfterTemplateKeyword: true

# spaces before assigments operator
SpaceBeforeAssignmentOperators: true

# spaces before ( in control statements :  if ()
SpaceBeforeParens: ControlStatements

# If true, spaces may be inserted into ()
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments)
SpacesBeforeTrailingComments: 2

# If true, spaces will be inserted after < and before > in template argument lists
SpacesInAngles: false

# If true, spaces are inserted inside container literals array and dict literals
SpacesInContainerLiterals: false

# If true, spaces may be inserted into C style casts
SpacesInCStyleCastParentheses: false

# If true, spaces will be inserted after ( and before )
SpacesInParentheses: false

# If true, spaces will be inserted after [ and before ]
SpacesInSquareBrackets: false

# Parse and format C++ constructs compatible with this standard
Standard: c++17

# The number of columns used for tab stops
TabWidth: 4

# The way to use tab characters in the resulting file (aka spaces or tab)
UseTab: Never
